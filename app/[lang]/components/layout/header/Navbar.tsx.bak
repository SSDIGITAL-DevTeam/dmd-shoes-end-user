"use client";

import React, { useState, useRef, useEffect, useMemo, useCallback } from "react";
import LocaleSwitcher from "./LocaleSwitcher";
import LocaleSwitcherList from "./LocaleSwitcherList";
import { usePathname } from "next/navigation";
import { HiMenu } from "react-icons/hi";
import Link from "next/link";
import { FaUserAlt, FaRegHeart, FaHeart, FaRegUser } from "react-icons/fa";
import Logo from "./Logo";
import { useAuthStore } from "@/store/auth-store";
import { useFavorites } from "@/hooks/useFavorites";
import { useRouter } from "next/navigation";

const AUTH_FALLBACK_LABELS: Record<
    string,
    { register: string; login: string; wishlist: string; account: string }
> = {
    id: { register: "Daftar", login: "Masuk", wishlist: "Favorit", account: "Akun" },
    en: { register: "Register", login: "Log In", wishlist: "Wishlist", account: "Account" },
};

const MENU_FALLBACK_LABELS = {
    home: "Home",
    products: "Products",
    articles: "Articles",
    about_us: "About Us",
    contact_us: "Contact",
};

type HeaderDictionary = {
    menu?: {
        home?: string;
        products?: string;
        articles?: string;
        about_us?: string;
        contact_us?: string;
    };
    auth?: Partial<(typeof AUTH_FALLBACK_LABELS)["en"]>;
    home?: { auth?: Partial<(typeof AUTH_FALLBACK_LABELS)["en"]> };
};

type NavbarProps = {
    lang: string;
    dictionary: HeaderDictionary;
};

export default function Navbar({ lang, dictionary }: NavbarProps) {
    const pathname = usePathname() || "/";
    const [isOpen, setIsOpen] = useState(false);
    const [navHeight, setNavHeight] = useState(0);
    const navRef = useRef<HTMLDivElement>(null);

    const { token, user, isHydrated, logout } = useAuthStore((s) => ({
        token: s.token,
        user: s.user,
        isHydrated: s.isHydrated,
        logout: s.logout,
    }));
    const { favorites } = useFavorites();
    const wishlistCount = useMemo(() => favorites.length, [favorites]);
    const router = useRouter();

    useEffect(() => {
        if (navRef.current) {
            const h = navRef.current.getBoundingClientRect().height || 0;
            setNavHeight(h);
        }
    }, []);

    const segments = pathname.split("/").filter(Boolean);
    const currentPath = "/" + (segments[1] ?? "");

    const isAuthenticated = Boolean(token && user);
    const showGuestView = isHydrated ? !isAuthenticated : true;

    const menuDictionary = dictionary.menu ?? MENU_FALLBACK_LABELS;
    const menu = [
        { label: menuDictionary.home ?? MENU_FALLBACK_LABELS.home, href: "/" },
        { label: menuDictionary.products ?? MENU_FALLBACK_LABELS.products, href: "/product" },
        { label: menuDictionary.articles ?? MENU_FALLBACK_LABELS.articles, href: "/article" },
        { label: menuDictionary.about_us ?? MENU_FALLBACK_LABELS.about_us, href: "/about" },
        { label: menuDictionary.contact_us ?? MENU_FALLBACK_LABELS.contact_us, href: "/contact" },
    ];

    const fallbackAuth = AUTH_FALLBACK_LABELS[lang] ?? AUTH_FALLBACK_LABELS.en;
    const dictionaryAuth = dictionary.auth ?? {};
    const dictionaryHomeAuth = dictionary.home?.auth ?? {};
    const authLabels = {
        register: dictionaryAuth.register ?? dictionaryHomeAuth.register ?? fallbackAuth.register,
        login: dictionaryAuth.login ?? dictionaryHomeAuth.login ?? fallbackAuth.login,
        wishlist: dictionaryAuth.wishlist ?? dictionaryHomeAuth.wishlist ?? fallbackAuth.wishlist,
        account: dictionaryAuth.account ?? dictionaryHomeAuth.account ?? fallbackAuth.account,
    };
    const wishlistLabelWithCount =
        wishlistCount > 0 ? `${authLabels.wishlist} (${wishlistCount})` : authLabels.wishlist;
    const isWishlistActive = currentPath === "/wishlist";
    const isProfileActive = currentPath === "/profile";
    const WishlistIcon = isWishlistActive ? FaHeart : FaRegHeart;
    const AccountIcon = isProfileActive ? FaUserAlt : FaRegUser;
    const [isAccountMenuOpen, setAccountMenuOpen] = useState(false);
    const desktopAccountRef = useRef<HTMLDivElement>(null);
    const mobileAccountRef = useRef<HTMLDivElement>(null);

    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            const target = event.target as Node;
            if (
                (desktopAccountRef.current && desktopAccountRef.current.contains(target)) ||
                (mobileAccountRef.current && mobileAccountRef.current.contains(target))
            ) {
                return;
            }
            setAccountMenuOpen(false);
        };
        document.addEventListener("mousedown", handleClickOutside);
        return () => {
            document.removeEventListener("mousedown", handleClickOutside);
        };
    }, []);

    useEffect(() => {
        setAccountMenuOpen(false);
    }, [pathname, showGuestView]);

    const handleAccountToggle = useCallback(() => {
        setAccountMenuOpen((prev) => !prev);
    }, []);

    const handleNavigateProfile = useCallback(async () => {
        setAccountMenuOpen(false);
        await router.push(`/${lang}/profile`);
    }, [lang, router]);

    const handleLogout = useCallback(async () => {
        setAccountMenuOpen(false);
        await logout();
    }, [logout]);

    return (
        <>
            {/* Navbar Fixed */}
            <nav
                ref={navRef}
                className="fixed top-0 left-0 z-50 w-full bg-primary"
                style={{ fontFamily: "var(--font-poppins)" }}
            >
                <div className="mx-auto flex max-w-[1200px] items-center justify-between px-4 md:px-6 py-2.5">
                    {/* Mobile: Hamburger kiri + Logo tengah */}
                    <div className="flex items-center justify-between w-full lg:hidden">
                        <button
                            className="text-white text-3xl"
                            onClick={() => setIsOpen((prev) => !prev)}
                            aria-label={isOpen ? "Close menu" : "Open menu"}
                        >
                            <HiMenu aria-hidden="true" />
                        </button>

                        <Logo lang={lang} />

                        {/* Auth actions kanan */}
                        <div className="flex items-center justify-end gap-3 text-white">
                            {showGuestView ? (
                                <>
                                    <Link
                                        href={`/${lang}/auth/register`}
                                        className="px-[10px] py-[6px] text-sm font-medium border border-white"
                                    >
                                        {authLabels.register}
                                    </Link>
                                    <Link
                                        className="px-[10px] py-[6px] text-sm font-medium border border-white bg-white text-primary"
                                        href={`/${lang}/auth/login`}
                                    >
                                        {authLabels.login}
                                    </Link>
                                </>
                            ) : (
                                <>
                                    <Link
                                        href={`/${lang}/wishlist`}
                                        className="relative flex h-8 w-8 items-center justify-center"
                                        aria-label={wishlistLabelWithCount}
                                    >
                                        <WishlistIcon size={20} aria-hidden="true" />
                                        {wishlistCount > 0 ? (
                                            <span className="absolute -top-1 -right-1 min-w-[18px] rounded-full bg-red-600 px-[5px] text-center text-[11px] font-semibold leading-[18px] text-white">
                                                {wishlistCount > 99 ? "99+" : wishlistCount}
                                            </span>
                                        ) : null}
                                    </Link>
                                    <Link
                                        href={`/${lang}/profile`}
                                        className="flex h-8 w-8 items-center justify-center"
                                        aria-label={authLabels.account}
                                    >
                                        <AccountIcon size={20} aria-hidden="true" />
                                    </Link>
                                </>
                            )}
                        </div>
                    </div>

                    {/* Desktop: Logo kiri */}
                    <div className="hidden lg:flex items-center space-x-4">
                        <Logo lang={lang} />
                    </div>

                    {/* Middle: Menu (desktop only) */}
                    <div className="hidden lg:flex flex-1 justify-center">
                        <div className="flex items-center gap-4">
                            {menu.map((item) => {
                                const isActive = currentPath === item.href;
                                return (
                                    <Link
                                        key={item.href}
                                        href={`/${lang}${item.href}`}
                                        className={`relative whitespace-nowrap text-[14px] md:text-[15px] font-medium transition-colors ${isActive ? "text-white" : "text-white/70 hover:text-white"
                                            }`}
                                    >
                                        {item.label}
                                    </Link>
                                );
                            })}
                        </div>
                    </div>

                    {/* Right: LocaleSwitcher + Auth (desktop only) */}
                    <div className="hidden lg:flex items-center gap-4">
                        {/* Pastikan LocaleSwitcher tidak auto-redirect di mount */}
                        <LocaleSwitcher />
                        {showGuestView ? (
                            <>
                                <Link
                                    href={`/${lang}/auth/register`}
                                    className="rounded border border-white px-4 py-2 text-sm md:text-[15px] font-medium text-white transition hover:bg-white/10"
                                >
                                    {authLabels.register}
                                </Link>

                                <Link
                                    className="rounded border border-white bg-white px-4 py-2 text-sm md:text-[15px] font-medium text-primary transition hover:bg-white/90"
                                    href={`/${lang}/auth/login`}
                                >
                                    {authLabels.login}
                                </Link>
                            </>
                        ) : (
                            <div className="flex items-center gap-4 text-white">
                                <Link
                                    href={`/${lang}/wishlist`}
                                    className="relative inline-flex items-center px-2.5 py-2 text-[15px] text-white transition hover:text-white hover:opacity-80"
                                    aria-label={wishlistLabelWithCount}
                                >
                                    <WishlistIcon size={20} aria-hidden="true" />
                                    <span className="sr-only">{wishlistLabelWithCount}</span>
                                    {wishlistCount > 0 ? (
                                        <span className="absolute -top-1 -right-1 min-w-[18px] rounded-full bg-red-600 px-[5px] text-center text-[11px] font-semibold leading-[18px] text-white">
                                            {wishlistCount > 99 ? "99+" : wishlistCount}
                                        </span>
                                    ) : null}
                                </Link>

                                <Link
                                    href={`/${lang}/profile`}
                                    className="inline-flex items-center px-2.5 py-2 text-[15px] text-white transition hover:text-white hover:opacity-80"
                                    aria-label={authLabels.account}
                                >
                                    <AccountIcon size={20} aria-hidden="true" />
                                    <span className="sr-only">{authLabels.account}</span>
                                </Link>
                            </div>
                        )}
                    </div>
                </div>
            </nav>

            {/* Spacer biar konten tidak ketimpa navbar */}
            <div style={{ height: navHeight }} />

            {/* Overlay */}
            {isOpen && <div className="fixed inset-0 bg-black/50 z-40" onClick={() => setIsOpen(false)} />}

            {/* Mobile Sidebar */}
            <div
                className={`lg:hidden fixed left-0 bg-white z-50 transform transition-transform duration-300 ease-in-out ${isOpen ? "translate-x-0" : "-translate-x-full"
                    } w-full max-w-[250px] flex flex-col`}
                style={{ top: navHeight, height: `calc(100% - ${navHeight}px)` }}
            >
                <div className="flex-1 overflow-y-auto pb-6">
                    {menu.map((item) => {
                        const isActive = currentPath === item.href;
                        return (
                            <Link
                                key={item.href}
                                href={`/${lang}${item.href}`}
                                className={`block px-[25px] py-[27px] font-medium ${isActive ? "text-primary" : "text-primary hover:text-primary/80"
                                    }`}
                                style={{ fontSize: "16px", lineHeight: "22px" }}
                                onClick={() => setIsOpen(false)}
                            >
                                {item.label}
                            </Link>
                        );
                    })}

                    {/* Auth Buttons */}
                    <div className="flex flex-col gap-4 mt-6 px-[25px]">
                        {showGuestView ? (
                            <>
                                <Link
                                    href={`/${lang}/auth/register`}
                                    className="px-4 py-3 text-[16px] leading-[22px] font-medium text-primary border border-primary text-center"
                                    onClick={() => setIsOpen(false)}
                                >
                                    {authLabels.register}
                                </Link>
                                <Link
                                    href={`/${lang}/auth/login`}
                                    className="px-4 py-3 text-[16px] leading-[22px] font-medium border border-primary bg-primary text-white text-center"
                                    onClick={() => setIsOpen(false)}
                                >
                                    {authLabels.login}
                                </Link>
                            </>
                        ) : (
                            <div className="flex items-center gap-4 text-primary text-[24px]">
                                <Link
                                    href={`/${lang}/wishlist`}
                                    className="relative px-[10px] py-[16px]"
                                    onClick={() => setIsOpen(false)}
                                    aria-label={wishlistLabelWithCount}
                                >
                                    <WishlistIcon size={24} aria-hidden="true" />
                                    <span className="sr-only">{wishlistLabelWithCount}</span>
                                    {wishlistCount > 0 ? (
                                        <span className="absolute -top-1 -right-0.5 min-w-[18px] rounded-full bg-red-600 px-[5px] text-center text-[11px] font-semibold leading-[18px] text-white">
                                            {wishlistCount > 99 ? "99+" : wishlistCount}
                                        </span>
                                    ) : null}
                                </Link>
                                <Link
                                    href={`/${lang}/profile`}
                                    className="px-[10px] py-[16px]"
                                    onClick={() => setIsOpen(false)}
                                    aria-label={authLabels.account}
                                >
                                    <AccountIcon size={24} aria-hidden="true" />
                                    <span className="sr-only">{authLabels.account}</span>
                                </Link>
                            </div>
                        )}
                    </div>

                    <div className="mt-6 border-t border-t-[#121212]/25 px-[25px]">
                        <LocaleSwitcherList />
                    </div>
                </div>
            </div>
        </>
    );
}
